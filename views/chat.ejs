<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>聊天室</title>
    <style>
        /* iPhone 13 mini, iPhone 13, iPhone 13 Pro, iPhone 14 mini, iPhone 14, iPhone 14 Pro */
        @media only screen and (min-width: 360px) and (max-width: 780px) {
            /* 修改元素大小、排列和顯示方式 */
        }

        /* iPhone 13 Pro Max, iPhone 14 Pro Max */
        @media only screen and (min-width: 428px) and (max-width: 926px) {
            /* 修改元素大小、排列和顯示方式 */
        }

        body {
            font-family: Arial, sans-serif;
        }

        h2 {
            text-align: center;
        }

        #chat {
            height: 300px;
            overflow-y: scroll;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }

        #messageInput {
            width: 70%;
            padding: 5px;
            font-size: 16px;
        }

        #sendButton {
            padding: 5px 10px;
            font-size: 16px;
        }

        form {
            margin-bottom: 10px;
        }

        button {
            padding: 5px 10px;
            font-size: 16px;
        }
    </style>
</head>

<body>
    <h2>聊天室</h2>
    <span id="connected-clients"></span>
    <div id="chat"></div>
    <input type="text" id="messageInput" placeholder="輸入訊息">
    <button id="sendButton">Send</button>

    <form action="/api/game" method="post">
        <button type="submit">遊戲室</button>
    </form>
    <form action="/api/info" method="post">
        <button type="submit">個人資訊</button>
    </form>
    <form action="/api/logout" method="post">
        <button type="submit">登出</button>
    </form>
</body>
<!-- 需引入io至客戶端使用 -->
<script src="/socket.io/socket.io.js"></script>
<!-- 操作io -->
<script>
    // 連接至 Socket.IO 伺服器 全域使用
    const socket = io();

    //-----------------------------------------------------------------------------------------

    // 更新在線人數
    function updateOnlineUsers() {
        socket.emit('get connected clients');
    }
    // 初始化時先更新一次在線人數
    updateOnlineUsers();
    // 定期更新在線人數
    setInterval(updateOnlineUsers, 1000); // 每秒更新一次


    // 處理 connected clients 事件
    socket.on('connected clients', (connectedClients) => {
        // 在這裡進行對 connectedClients 的處理，例如更新頁面上的連線人數顯示等等
        const connectedClientsElement = document.getElementById('connected-clients');
        connectedClientsElement.innerHTML = `目前連線人數：${connectedClients} 人`;
    });

    //------------------------------------------------------------------------------------------

    // 取得元素
    const chatDiv = document.getElementById('chat');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');

    // 使用者資訊
    const userInfo = '<%= user_info %>';
    // 發送訊息
    function sendMessage() {
        const message = `${userInfo}：${messageInput.value}`;

        if (message) {
            socket.emit('chat message', message); // 發送 'chat message' 事件到伺服器
            messageInput.value = ''; // 清空輸入框
        }
    }
    // 當按下送出按鈕時發送訊息
    sendButton.addEventListener('click', sendMessage);
    // 當按下 Enter 鍵時發送訊息
    messageInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            sendMessage();
        }
    });

    // 監聽 'chat message' 事件，接收伺服器傳來的訊息
    socket.on('chat message', (message) => {
        const messageElement = document.createElement('p');
        messageElement.innerText = message;
        chatDiv.appendChild(messageElement);
        chatDiv.scrollTop = chatDiv.scrollHeight; // 捲動至最底部
    });


    //------------------------------------------------------------------------------------------------
    // 處理 user joined 事件
    socket.on('user joined', (role) => {
        // 在這裡進行對角色加入聊天室的處理，例如更新頁面上的狀態顯示等等
        const messageElement = document.createElement('div');
        messageElement.innerText = `${role} 已加入聊天室`;
        messageElement.style.color = 'blue'; // 改變顏色
        chatDiv.appendChild(messageElement);
        chatDiv.scrollTop = chatDiv.scrollHeight; // 捲動至最底部
    });
    // 處理 user left 事件
    socket.on('user left', (role) => {
        // 在這裡進行對角色離開聊天室的處理，例如更新頁面上的狀態顯示等等
        const messageElement = document.createElement('div');
        messageElement.innerText = `${role} 已離開聊天室`;
        messageElement.style.color = 'blue'; // 改變顏色
        chatDiv.appendChild(messageElement);
        chatDiv.scrollTop = chatDiv.scrollHeight; // 捲動至最底部
    });

    // 創建一個已印出的歷史紀錄列表
    const printedHistory = [];
    // 處理歷史紀錄事件
    socket.on('user-body', (body) => {
        for (let i = 0; i < body.length; i++) {
            const key = body[i];
            // 檢查該項目是否已印出，若已印出則跳過
            if (printedHistory.includes(key)) {
                continue;
            }
            const element = document.createElement('div');
            element.innerText = key;
            chatDiv.appendChild(element);
            chatDiv.scrollTop = chatDiv.scrollHeight;

            // 將該項目加入已印出的歷史紀錄列表
            printedHistory.push(key);
        }
    });
</script>

</html>